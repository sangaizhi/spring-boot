一、Spring 的事务机制
    Spring 的事务机制是用统一的机制来处理不同的数据访问技术的事务处理。Spring 的事务机制提供了 PlatformTransactionManager
    接口，不同的数据访问技术的事务使用不同的接口实现。如下表
    ---------------------------------------------------------------------
    |          访问技术          |                 实现                 |
    ---------------------------------------------------------------------
    |          JDBC              |     DataSourceTransactionManager     |
    ---------------------------------------------------------------------
    |          JPA               |        JPATransactionManager         |
    ---------------------------------------------------------------------
    |         Hibernate          |      HibernateTransactionManager     |
    ---------------------------------------------------------------------
    |          JDO               |        JdoTransactionManager         |
    ---------------------------------------------------------------------
    |        分布式事务          |       JtaTransactionManager          |
    ---------------------------------------------------------------------

二、声明式事务
    使用 @Transactional 注解来选择需要事务管理的方法.
    Spring 提供了一个 @EnableTransactionManager 注解在配置类上来开启声明式事务的支持。
    eg：
        @Configuration
        @EnableTransactionManagement
        public class BaseDataConfiguration {
        }
    1、注解行为
        1)、propagation
            定义事务的生命周期，主要有以下选项：
            A、REQUIRED: 方法A 调用时没有事务则新建一个事务，当在 A方法中调用方法B 时，方法B 将使用相同的事务；
               如果B方法发生异常需要回滚数据时，整个事务数据将会回滚。
            B、REQUIRES_NEW：对于方法A 和方法B，在方法调用时无论是否存在事务都将开启一个新的事务。
            C、NESTED: 和 REQUIRES_NEW 类似，但支持 JDBC，不支持 JPA 和 Hibernate。
            D、SUPPORTS: 方法调用时有事务就用事务，没有就不用。
            E、NOT_SUPPORTS: 强制方法不在事务中执行，若有事务，在方法调用到结束事务都将会挂起。
            F、NEVER: 强制方法不在事务中执行，若有事务则抛出异常
            G、MANDATORY: 强制方法在事务中执行，若无事务则抛出异常。
        2)、isolation
            隔离级别，决定了事务的完整性，处理在多事务对相同数据下的处理机制，主要有以下选项：
            A、READ_UNCOMMITTED: 读未提交，对于在 A事务中修改了一条记录但没提交事务，在 B事务中可以读取到修改后的记录。
               可导致脏读、不可重复读以及幻读。
            B、READ_COMMITTED: 读已提交，只有在 A事务里修改了一条记录且提交事务之后，在 B事务中才可以读取到提交后的记录。
                阻止了脏读，但是能导致不可重读和幻读。
            C、REPEATABLE_READ: 不仅能实现 READ_COMMITTED 的功能，而且还能阻止当 A事务读取了一条记录，B事务将不允许修改
               这条记录；阻止了脏读和不可重复读，但是可出现幻读。
            D、SERIALIZABLE: 此级别下事务是顺序执行的，可以避免上述级别的缺陷，但开销较大。
            E、DEFAULT: 使用当前数据库的默认隔离级别。
               如：Oracle 是 READ_COMMITTED
                   MySQL 是 REPEATABLE_READ

            脏读：一个事务读取到了另外一个事务没有提交的数据
            不可重复读：在同一事务中，两次读取同一数据，得到内容不同
            幻读：同一事务中，用同样的操作读取两次，得到的记录数不相同
                   幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表
                   中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会
                   发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。
        3)、timeout
            事务的过期时间，默认为当前数据库的事务过期时间
        4)、readOnly
            指定当前事务是否是只读事务，默认 false
        5)、rollbackFor
            指定哪个或者哪些异常可以引起事务回滚, 默认 Throwable的子类
        6)、noRollbackFor
            指定哪个或者哪些异常不可以引起事务回滚，默认 Throwable的子类
    2、@Transactional 使用在类上
       当 @Transactional 注解在类上，表示被注解的类的所有 public 方法都是开启事务的。如果类级别和方法级别同时使用了
       @Transactional 注解，则使用在类级别的注解会重载方法级别的注解。

三、Spring Data JPA 的事务支持
    Spring Data JPA 对所有的默认方法都开启了事务支持，且查询类事务默认启用 readOnly = true 属性.

四、Spring Boot 的事务支持
    1、自动配置的事务管理器
        1)、在使用 JDBC 作为数据访问技术的时候，Spring Boot 为我们定义了 PlatformTransactionManager 的实现 DataSourceTransactionManager
            的 Bean 。
            配置如下：
            package org.springframework.boot.autoconfigure.jdbc;
            @Configuration
            @ConditionalOnClass({ JdbcTemplate.class, PlatformTransactionManager.class })
            @AutoConfigureOrder(Ordered.LOWEST_PRECEDENCE)
            @EnableConfigurationProperties(DataSourceProperties.class)
            public class DataSourceTransactionManagerAutoConfiguration {
                @Configuration
                @ConditionalOnSingleCandidate(DataSource.class)
                static class DataSourceTransactionManagerConfiguration {
                    private final DataSource dataSource;
                    private final TransactionManagerCustomizers transactionManagerCustomizers;
                    DataSourceTransactionManagerConfiguration(DataSource dataSource,
                            ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {
                        this.dataSource = dataSource;
                        this.transactionManagerCustomizers = transactionManagerCustomizers
                                .getIfAvailable();
                    }
                    @Bean
                    @ConditionalOnMissingBean(PlatformTransactionManager.class)
                    public DataSourceTransactionManager transactionManager(
                            DataSourceProperties properties) {
                        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(
                                this.dataSource);
                        if (this.transactionManagerCustomizers != null) {
                            this.transactionManagerCustomizers.customize(transactionManager);
                        }
                        return transactionManager;
                    }

                }
            }
        2)、在使用 JPA 作为数据访问技术的时候， Spring Boot 为我们定义一个 PlatformTransactionManager 的实现
            JpaTransactionManager.
            配置如下：
            package org.springframework.boot.autoconfigure.orm.jpa;
            import org.springframework.orm.jpa.JpaTransactionManager;
            @EnableConfigurationProperties(JpaProperties.class)
            @Import(DataSourceInitializedPublisher.Registrar.class)
            public abstract class JpaBaseConfiguration implements BeanFactoryAware {
            	private final DataSource dataSource;
            	private final JpaProperties properties;
            	private final JtaTransactionManager jtaTransactionManager;
            	private final TransactionManagerCustomizers transactionManagerCustomizers;
            	private ConfigurableListableBeanFactory beanFactory;
            	protected JpaBaseConfiguration(DataSource dataSource, JpaProperties properties,
            			ObjectProvider<JtaTransactionManager> jtaTransactionManager,
            			ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {
            		this.dataSource = dataSource;
            		this.properties = properties;
            		this.jtaTransactionManager = jtaTransactionManager.getIfAvailable();
            		this.transactionManagerCustomizers = transactionManagerCustomizers
            				.getIfAvailable();
            	}

            	@Bean
            	@ConditionalOnMissingBean(PlatformTransactionManager.class)
            	public PlatformTransactionManager transactionManager() {
            		JpaTransactionManager transactionManager = new JpaTransactionManager();
            		if (this.transactionManagerCustomizers != null) {
            			this.transactionManagerCustomizers.customize(transactionManager);
            		}
            		return transactionManager;
            	}
            	...
            	...
            }

    2、自动开启注解事务的支持
        在 Spring Boot 中，无须显示开启使用 @EnableTransactionManagement 注解




